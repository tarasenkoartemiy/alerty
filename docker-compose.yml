version: "3"
services:
  bot:
    build:
      context: .
    env_file:
      - alerty/.env
    command: >
      sh -c "python manage.py compilemessages &&
                   python manage.py migrate &&
                   python manage.py runserver 0.0.0.0:8000 --noreload"
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
  database:
    image: postgres:15.3-alpine3.18
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - alerty/.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    env_file:
      - alerty/.env
    command: "http bot:8000"
    ports:
      - "4040:4040"
    depends_on:
      - bot
  redis:
    image: redis:7.0-alpine3.18
  celery:
    restart: unless-stopped
    build:
      context: .
    env_file:
      - alerty/.env
    command: celery -A alerty worker -B -l info
    depends_on:
      - database
      - bot
      - redis
volumes:
  postgres-data: